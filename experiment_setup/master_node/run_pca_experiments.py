import os, sys, pika, random
import numpy as np

storage_folder      = "/media/storage/amd_pca_test/"
if raw_input("Remove everything from folder" + storage_folder + ", press enter to continue, N to abort...") == "N":
    sys.exit(0)
os.system("rm -rf " + storage_folder + "*")

event_list_file     = "/media/setup/intel_measurements/amd_benign_scripts/amd_new_event_list.txt"

test_list               = []

# home 3 tests
for test_num in np.arange(1, 4):
    test_list.append(['home', test_num])

# creative 7 tests
for test_num in np.arange(1, 8):
    test_list.append(['creative', test_num])

# work 3 tests
for test_num in np.arange(1, 4):
    test_list.append(['work', test_num])

# office 3 tests
for test_num in np.arange(1, 4):
    test_list.append(['office', test_num])

# # storage 10 tests
# for test_num in np.arange(1, 11):
#     test_list.append(['storage', test_num])

event_list              = []
readfile                = open(event_list_file)
for lines in readfile:
    event_list.append(lines.split('\n')[0])
readfile.close()

total_num_events        = len(event_list)

if total_num_events / 6 * 6 == total_num_events:
    num_of_measures         = total_num_events / 6 
else:
    num_of_measures         = total_num_events / 6 + 1

connection = pika.BlockingConnection(pika.ConnectionParameters(
        host='192.168.1.2', port=5672, heartbeat_interval=0))
channel = connection.channel()
channel.queue_declare(queue='amd_queue', durable=True)

times_to_measure    = 32

for times in np.arange(0, times_to_measure):
    os.system("mkdir /media/storage/" + str(times))
    for benchmark_category, benchmark_number in [['home',1],['creative',1],['creative',2],['work',1],\
                                                ['work',2],['office',1],['office',2]]:

        for idx in np.arange(0,num_of_measures):

            message = "python Y:\\intel_measurements\\amd_benign_scripts\\get_pca_measure.py " \
                         + str(idx) + " " + benchmark_category + " " \
                         + str(benchmark_number) + " " \
                         + str(times) \
                         + " > C:\\Users\\foo\\Desktop\\log_file.log 2>&1"
            # message = "shutdown -r -t 0"

            channel.basic_publish(exchange='',
                                  routing_key='amd_queue',
                                  body=message,
                                  properties=pika.BasicProperties(
                                     delivery_mode = 2, # make message persistent
                                  ))
            print(" [x] Sent %r" % message)

connection.close()
