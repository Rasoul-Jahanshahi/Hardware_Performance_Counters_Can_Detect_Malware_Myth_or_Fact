import os, sys, pika, random
import numpy as np

storage_folder      = "/media/amd_malware_test/"

event_list_file     = "/media/setup/intel_measurements/amd_benign_scripts/events_to_measure.txt"

malware_list        = os.listdir('/media/setup/launch_malware/')
malware_list        = malware_list[::-1]
random.shuffle(malware_list)

finished_malware    = {}
def add_finished_malware(path):
    for root, dirs, files in os.walk(path):
        for filename in files:
            if filename.endswith('.txt'):
                file_full_path  = os.path.join(root, filename)
                run_time    = filename.split('_')[1]
                bm_name     = filename.split('_')[2]
                finished_malware[run_time + '_' + bm_name] = False
    return finished_malware

finished_malware = add_finished_malware(storage_folder)
finished_malware = add_finished_malware("/media/storage/")
finished_malware = add_finished_malware("/media/six_T_disk/bobzhou/amd_malware/fourth")

# number of same experiment we need to run 
experiment_times        = 32

connection = pika.BlockingConnection(pika.ConnectionParameters(
        host='192.168.1.2', port=5672, heartbeat_interval=0))
channel = connection.channel()
channel.queue_declare(queue='task_queue', durable=True)

def multi_issue():
    count = 0
    for benchmark in malware_list:

        for idx in np.arange(0, experiment_times):
            if (str(idx) + '_' + benchmark[:-4]) not in finished_malware:
                message = "python Y:\\intel_measurements\\amd_benign_scripts\\get_malware_measure.py " \
                             + str(idx) + " " + benchmark[:-4] + " " \
                             + " > C:\\Users\\foo\\Desktop\\log_file.log 2>&1"

                channel.basic_publish(exchange='',
                                      routing_key='task_queue',
                                      body=message,
                                      properties=pika.BasicProperties(
                                         delivery_mode = 2, # make message persistent
                                      ))

                print(" [x] Sent %r" % message)
                count += 1

    print count

def single_issue():

    message = "python Y:\\intel_measurements\\amd_benign_scripts\\get_malware_measure.py " \
                 + '29' + " " + '17770f1b3f14d195a2dd6d09cb841965' + " " \
                 + " > C:\\Users\\foo\\Desktop\\log_file.log 2>&1"

    channel.basic_publish(exchange='',
                          routing_key='task_queue',
                          body=message,
                          properties=pika.BasicProperties(
                             delivery_mode = 2, # make message persistent
                          ))

    print(" [x] Sent %r" % message)

multi_issue()
connection.close()
