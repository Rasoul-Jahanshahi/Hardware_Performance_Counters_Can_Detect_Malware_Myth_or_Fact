#include "../include/stdafx.h"

// Constructor will get the number of counters on the architecture in-use
// Will initialize only that many events. 
profile::profile(unsigned int events_to_profile)
{
	// Inititalizing the global variables

	pEventCounterCount			= new unsigned int;
	pPerformanceEvent			= new unsigned __int64;
	pAvailabilityMask			= new unsigned int;
	ErrorMsgSize				= 512000;
	pErrorMsg					= new wchar_t[ErrorMsgSize];
	Core						= 7; //Profiling on Core 8
	CpuCoreMask					= 0xF8;
	pMajor						= new unsigned int;
	pMinor						= new unsigned int;
	pBuild						= new unsigned int;
	pProfileState				= new ProfileState[1];
	security = NULL;
	stack_size = 512000;
	initflag = CREATE_SUSPENDED;
	thread_resume_log			= 0;
	thrdaddr = 0;
	dwThreadAffinityMask = 0x7F; // PRofiling on Core 8
	thread_affinity = 10;
	lpMutexAttributes = 0;
	bInitialOwner = 0;
	lpName = (LPCTSTR)"read_thread";
	pDwExitCode = &dwExitCode;
	arglist = (void*)0;

	// Get the number of counters on the host machine
	error_log = fnGetEventCounters(pEventCounterCount);
	if (error_log == S_OK)
	{
		std::cout << "The number of counters available on the current architecture: " 
			 << *pEventCounterCount << std::endl;
	}
	else
	{
		std::cout << "Failed to get the number of counters with possble error: " 
			 << error_log << std::endl;
		kill_profile();
	}

	// Create Event Configuration objects
	// and the array to store the sampled count values
	//based on the number of events to monitor 
	if (events_to_profile <= *pEventCounterCount)
	{ 
		pEventConfig      = new EventConfiguration[events_to_profile];
		pAllEventCount    = new unsigned __int64[events_to_profile];
		
		// Initializing the arrays that store the counter counts.
		memset(pAllEventCount, 0, sizeof(unsigned __int64) * events_to_profile);
	
		// Handle that stores the thread properties that reads the counter
		threads_for_reading_counter = new HANDLE[events_to_profile];

		// Use the struct read_count to select the counter to read
		get_counter = new read_count[events_to_profile];
		for (unsigned int i = 0; i < events_to_profile; i++)
		{
			get_counter[i].counter_index = (unsigned __int64)i;
			get_counter[i].CpuCore = Core;
			get_counter[i].pStoreEventCount = &pAllEventCount[i];
		}



	}
	else
	{
		std::cout << "The number of events to profile are more than the number of available "
			 << "hardware counters. Please enter " << *pEventCounterCount << " or less"
			 << "events" << std::endl;
		kill_profile();
	}
}
