import sys, os, json, logging, random
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as plt
#from matplotlib import gridspec
import numpy as np

font = {\
        'family' : 'serif',\
        'size'   : 18}
plt.rc('font', **font)

sensitivity_report = {}

for files in os.listdir('.'):
    if files.startswith('print_info') and "1" not in files:
        read_file = open(files, 'r')
        sensitivity_report.update(json.load(read_file))
        read_file.close()


# filename = "print_info_3.json"
# read_file = open(filename, "r")
# sensitivity_report = json.load(read_file)

fig, ax = plt.subplots(1,5, figsize=(25,5))

for clf in sensitivity_report.keys():
    
    # extract the average value
    avg = 0
    for keys in sensitivity_report[clf]:
        avg = sensitivity_report[clf][keys].split(',')[0].split(':')[1]
    std = 0
    for keys in sensitivity_report[clf]:
        std = sensitivity_report[clf][keys].split(',')[1].split(':')[1]

    if clf.startswith("Nearest Neighbors"):
        num_neighbors = clf.split(':')[2].split(',')[0]
        print "KNN: When K equals to {0:5s}, the average is {1:5f}.".\
                format(num_neighbors, float(avg))
        ax[0].scatter(int(num_neighbors), 100 * float(avg), c="blue")
        ax[0].set_xlabel("K in KNN")
        ax[0].set_ylabel("Average F1-score[%]")

    if clf.startswith("Decision Tree"):
        max_depth =  clf.split(',')[-2].split(':')[1]
        print "DT: max_depth is {0:5s} and the average is {1:5f}.".\
                format(max_depth, float(avg))
        ax[1].scatter(int(max_depth), 100 * float(avg), c="blue")
        ax[1].set_xlabel("Max_depth in DT")

    if clf.startswith("Random Forest"):
        max_depth =  clf.split(',')[-2].split(':')[1]
        print "Random Forest: max_depth is {0:5s} and the average is {1:5f}.".\
                format(max_depth, float(avg))
        ax[2].scatter(int(max_depth), 100 * float(avg), c="blue")
        ax[2].set_xlabel("Max_depth in RF")

    if clf.startswith("AdaBoost"):
        num_estimators = clf.split(',')[0].split(':')[2]
        print "AdaBoost: max_depth is {0:5s} and the average is {1:5f}.".\
                format(num_estimators, float(avg))
        ax[3].scatter(int(num_estimators), 100 * float(avg), c="blue")
        ax[3].set_xlabel("Num_estimators\nin AdaBoost")

    def neuron_plot():
        num_neurons = clf.split(',')[6].split('[')[1]
        print "Neural Net: max_depth is {0:5s} and the average is {1:5f}.".\
                format(num_neurons, float(avg))
        ax[4].scatter(int(num_neurons), 100 * float(avg), c="blue")
        # ax[4].scatter(int(num_neurons), 100 * float(std), c="blue")
        ax[4].set_xlabel("Neurons per layer\nin MLP")
        # ax[4].set_ylabel("avg(red), std(blue)")

    def regulation_plot():
        alpha = clf.split(',')[-5].split(':')[1]
        print "Neural Net: max_depth is {0:5s} and the average is {1:5f}.".\
                format(alpha, float(avg))
        ax[4].scatter(int(alpha), 100 * float(avg), s=100 * float(std), c="blue")
        # ax[4].scatter(int(alpha), 100 * float(std), c="blue")
        ax[4].set_xlabel("Regulation Ratio")
        # ax[4].set_ylabel("avg(red), std(blue)")

    if clf.startswith("Neural Net"):
        neuron_plot()

for single_ax in ax:
    single_ax.grid()

savefig_name = PdfPages("sensitivity.pdf")
plt.savefig(savefig_name, format='pdf', bbox_inches='tight')

savefig_name.close()
plt.close()
        


# read_file.close()
