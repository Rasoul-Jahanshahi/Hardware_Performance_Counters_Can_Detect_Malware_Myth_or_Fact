import json, pyperclip

def write_to_files(data):
    numbers_path = 'numbers/'
    for clf in data:
        for columns in ['f1_score', 'roc_auc']:
            if columns == 'roc_auc' and 'roc_auc' not in data[clf]:
                continue
            if columns == 'roc_auc':
                auc_string = 'auc'
            else:
                auc_string = columns
            filename = numbers_path + "__" \
                            + clf.lower().replace(' ', '_')\
                            + "_" + auc_string + "__.tex"
            print filename
            writefile = open(filename, 'w')
            writefile.write("{0:.4g}".format(data[clf][columns] * 100))

            writefile.close()

def find_data(read_path, json_write_path):
    with open(read_path, 'r') as data_file:
        total_data = json.load(data_file)
    data_file.close()
    print "Loading complete ..." 
    data = {}
    for models in total_data:
        highest_f1_score = 0
        if models not in data:
            data[models] = {}
        for experiments in total_data[models]:
            print "Reading model " + models + " " + experiments + " ..."
            if total_data[models][experiments]['f1_score'] > highest_f1_score:
                highest_f1_score = total_data[models][experiments]['f1_score'] 
                data[models] = total_data[models][experiments]
    with open(json_write_path, 'w') as data_file:
        json.dump(data, data_file, indent=2)
    data_file.close()
    return data

def read_data(readfile):
    #with open('plot_latex_table.json', 'r') as data_file:
    with open(readfile, 'r') as data_file:
        data = json.load(data_file)
    data_file.close()
    return data

def generate_latex_table(readfile, filename):
    data = read_data(readfile)
    report_string = """
    
    \\begin{table}[]
    \\centering   
    \\caption{Accuracies in Malware Detection (Malware as Positive Label)}
    \\label{tab:accuracy}     
    \\resizebox{\\columnwidth}{!}{%
    \\begin{tabular}{c|cccc}  
    Algo. & Precision[$\\%$] & Recall[$\\%$] & F1-Score[$\\%$] & AUC[$\\%$]\\\\
    \\hline
    \\hline


    """
    for clf in data:
        report_string += " "*8 + clf 
        for columns in ['precision', 'recall', 'f1_score', 'roc_auc']:
            report_string += " & "
            if columns == 'roc_auc' and 'roc_auc' not in data[clf]:
                report_string += "{\\color{red}$TBD$}"
                continue
            if clf.endswith('(tensorflow)') and columns != 'roc_auc':
                percentage_num = data[clf][columns][1] * 100
            else:
                percentage_num = data[clf][columns] * 100
                percentage_str = "{0:.4g}".format(percentage_num)
            if percentage_num > 90:
                report_string += "\\textbf{" + percentage_str + "}"
            elif percentage_num < 40:
                report_string += "{\color{red}" + percentage_str + "}"
            else:
                report_string += percentage_str 
        report_string += "\\\\\n"
    report_string += """

    \end{tabular}
    }
    \end{table}

    """
    print "*"*50
    print report_string
    print "*"*50
    writefile = open(filename, 'w')
    writefile.write(report_string)
    writefile.close()
    pyperclip.copy(report_string)
    return data

    # generate all the numbers files

if __name__ == "__main__":
    find_data('1k_custom_cv/total_data.txt',\
                'plot_latex_table.json')
    # find_data('customized_cross_validation/total_data.txt',\
    #             'plot_latex_table.json')
    data = generate_latex_table('plot_latex_table.json', 'accuracy_table.tex')
    write_to_files(data)

