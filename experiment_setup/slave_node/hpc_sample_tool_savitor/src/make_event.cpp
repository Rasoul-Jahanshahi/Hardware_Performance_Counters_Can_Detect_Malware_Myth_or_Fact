#include "../include/stdafx.h"

#define START_COUNT 0

void profile::make_event(unsigned int EventSelect, unsigned int UnitMask, unsigned int event_count)
{

	// Get the number of counters on the host machine
	error_log = fnMakeProfileEvent(EventSelect, UnitMask , edgeDetect, usrEvents, \
		osEvents, guestOnlyEvents, hostOnlyEvents, countingEvent, pPerformanceEvent);
	if (error_log != S_OK) 
	{
		std::cout << "Event with eventSelect " << EventSelect
			 << "  invalid for counting: with possible error: " << error_decode(error_log)
			 << std::endl;
		kill_profile();
	}
	else
		std::cout << "Event: " << *pPerformanceEvent << " ready to configure" << std::endl;
	
	// Use the Event Configuraiton Struct to set the events 
	// to a specific counter on a specific core
	pEventConfig[event_count].performanceEvent = *pPerformanceEvent;
	pEventConfig[event_count].value = START_COUNT;
	pEventConfig[event_count].eventCounter = Core;

	return;
}