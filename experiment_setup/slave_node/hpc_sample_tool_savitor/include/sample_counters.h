#pragma once
#pragma once
#include "../include/stdafx.h"

#ifndef sample_counter
#define sample_counter

// Declaration for the thread that will sample the hardware performance
// counters
unsigned int __stdcall sample_counter_thread(void*);

class Sample_Counters
{
public:

	// Handles for to-be spawned threads
	HANDLE mutex;
	HANDLE _sample_counter;
	HANDLE _write_to_file;

	// Thread Properties
	void *security;
	unsigned stack_size;
	void *arglist;
	unsigned initflag;
	unsigned *thrdaddr;

	// Thread affinity
	DWORD_PTR dwThreadAffinityMask;
	DWORD_PTR thread_affinity;

	// Mutex Properties
	LPSECURITY_ATTRIBUTES lpMutexAttributes;
	BOOL bInitialOwner;
	LPCTSTR lpName;

	// Variables required for sampling and writing the
	// output to a file
	unsigned int sampling_frequency;
	unsigned int event_count;
	std::string *events;
	std::fstream file;
	
	// FIFO Queue for temporaily holding the samples values
	std::queue<unsigned __int64> sample_queue;

	// Memeber Funcitons
	Sample_Counters(unsigned int *, std::string, std::string *, unsigned int);
	void setup_sample_counter( profile* );
	bool release_sample_counter_thread();
	bool release_write_file_thread();
	
};


//Sturct is passed to thread that samples the counters
typedef struct objects_required_for_sampling
{
	objects_required_for_sampling()
	{
		current_profiler = NULL;
		current_sampler = NULL;
	}
	// object for the current profiler
	profile *current_profiler;
	// object for the current sampler
	Sample_Counters *current_sampler;

} sampling_objects;

#endif

