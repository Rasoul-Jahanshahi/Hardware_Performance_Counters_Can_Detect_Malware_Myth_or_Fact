# this scipt is TTA1, divided by traces and do 1k cross validations

import learn_all_boyou, logging, sys, random, os, json
import numpy as np
from sklearn.model_selection import StratifiedKFold


class learn_1k_cv(learn_all_boyou.boyou_learn):
    def classic_cross_validation(self):
        """
        This function does 10 fold split for self.data and its label :class:`learn_all_boyou`. 
        Data and label will be shuffled. The data and label is splited with granularity of 
        single feature vector.

        :param dict self.report: simulation report dictionary
        :param array self.X_train: Training array 
        :param array self.X_test: Testing array
        :param array self.y_train: Training label
        :param array self.y_test: Testing label
        :param list prediction: prediction results
        :param list predict_proba: prediction confidence
        
        """
        self.logger.info('Start to cross validate ...')
        self.load_data()
        self.setup_classifiers()
        self.report     = {}
        # random shuffling
        zipped_list             = zip(self.data, self.label)
        random.shuffle(zipped_list)
        self.data, self.label   = zip(*zipped_list)
        self.data               = np.array(list(self.data))
        self.label              = np.array(list(self.label))
        # 10 fold split
        cv                      = StratifiedKFold(n_splits = 10)
        
        experiment_path         = self.result_path
        for names, clf in zip(self.names, self.classifiers):
            self.logger.info(names + " in process ....")

            count                   = 0

            for train_idx, test_idx in cv.split(self.data, self.label):
                self.X_train, self.X_test = self.data[train_idx], self.data[test_idx]
                self.y_train, self.y_test = self.label[train_idx], self.label[test_idx]
                clf.fit(self.X_train, self.y_train)
               
                self.result_path    = experiment_path + str(count) + '/'
                count               += 1

                if not os.path.isdir(self.result_path):
                    self.logger.info(self.result_path + " new folder created ....")
                    os.mkdir(self.result_path)
                else:
                    self.logger.info(self.result_path + " old directory exists ....")
                    if os.path.isfile(self.result_path + 'classification_report.txt'):
                        self.logger.info(self.result_path + " old report exists ....")
                        with open(self.result_path + 'classification_report.txt', 'r') as outfile:
                            self.report = json.load(outfile)
                        outfile.close()


                self.prediction     = clf.predict(self.X_test)
                self.text_class_report(names)

                self.predict_proba  = clf.predict_proba(self.X_test)
                self.roc_curve_report(names)

            self.logger.info(names + " testing completed!")
    
    
if __name__ == "__main__":
    
    logger  = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    logger_handler = logging.StreamHandler()
    logger_handler.setFormatter(\
        logging.Formatter('%(asctime)s [%(levelname)s]\
            %(filename)s [%(lineno)d]: %(funcName)s(): %(message)s'))
    logger.addHandler(logger_handler)

    learn1 = learn_1k_cv(logger, \
            data_path_prefix='../amd_data/')
            #data_path_prefix='/home/bobzhou/2017_summer/data_analysis/amd_data_analysis/')

    learn1.result_path = sys.argv[1] + '/'
    logger.info("files will be saved in the following path: " + learn1.result_path)

    #learn1.run()
    learn1.classic_cross_validation()
    #learn1.test_rasoul()


