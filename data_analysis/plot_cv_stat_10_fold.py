import json, os, sys, random
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc
from matplotlib.backends.backend_pdf import PdfPages

import plot_cv_stat

def read_data_customized_cv(folder_path):
    #customized_cross_validation/1/classification_report.txt
    data = {}
    total_data = {}
    for root, dirs, files in os.walk(folder_path):
        for filename in files:
            if filename == 'classification_report.txt':
                file_full_path  = os.path.join(root, filename)

                print "Reading " + file_full_path + " ..."
                with open(file_full_path, 'r') as input_file:
                    data_per_file = json.load(input_file)
                input_file.close()

                for models in data_per_file.keys():
                    if models not in data:
                        data[models]    = {}
                    
                    experiment_times = int(file_full_path.split('/')[1]) * 10 + \
                                        int(file_full_path.split('/')[2])
                    if models not in total_data:
                        total_data[models]    = {}
                    if experiment_times not in total_data[models]:
                        total_data[models][experiment_times]  = {}

                    for specs in data_per_file[models].keys():
                        if specs != 'support':
                            if specs not in data[models]:
                                data[models][specs]    = []
                            else:
                                data[models][specs].append(data_per_file[models][specs])

                            if specs not in total_data[models][experiment_times]:
                                total_data[models][experiment_times][specs] = \
                                    data_per_file[models][specs]

    with open(folder_path + '/total_data.txt', 'w') as output_file:
        json.dump(total_data, output_file, indent=2)
    output_file.close()

    with open(folder_path + '/summary.txt', 'w') as output_file:
        json.dump(data, output_file, indent=2)
    output_file.close()

if __name__ == "__main__":
	
    font = {\
            'family' : 'serif',\
            'size'   : 20}
    plt.rc('font', **font)

    # read_data_classic_cv()
    # plot_cv_stat.plot_cv('classic_cross_validation/summary.txt',\
    #         'figures/classic_cv_boxplot.pdf')
    # read_data_customized_cv('learn_traces')
    # plot_cv_stat.plot_cv('learn_traces/summary.txt',\
    #         'figures/classic_cv_boxplot.pdf')
    # read_data_customized_cv('customized_cross_validation')
    # plot_cv_stat.plot_cv('customized_cross_validation/summary.txt',\
    #         'figures/customized_cv_boxplot.pdf')
    # plot_cv_stat.stat_cv_all('learn_traces', 'customized_cross_validation')


    # read_data_customized_cv('1k_custom_cv')
    # read_data_customized_cv('1k_classic_cv')
    # plot_cv_stat.plot_cv('1k_classic_cv/summary.txt',\
    #         'figures/classic_cv_boxplot.pdf')
    # plot_cv_stat.plot_cv('1k_custom_cv/summary.txt',\
    #         'figures/classic_cv_boxplot.pdf')
    plot_cv_stat.stat_cv_all('1k_classic_cv', '1k_custom_cv')
