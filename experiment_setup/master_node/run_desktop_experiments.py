import os, sys, pika, random, json
import numpy as np

with open('window_info_new.txt','r') as input_data:
    window_info = json.load(input_data)
input_data.close()

times_to_measure    = 32

finished_experiment = {}
def add_finished_experiment(path, finished_experiment):
    for files in os.listdir(path):
        number_of_runs  = files.split('_')[1]
        bm_name         = files.split('_')[2][:-4]
        if number_of_runs not in finished_experiment:
            finished_experiment[number_of_runs] = {}
        if bm_name not in finished_experiment[number_of_runs]:
            finished_experiment[number_of_runs][bm_name] = True 
add_finished_experiment('/media/six_T_disk/bobzhou/amd_desktop_measurement/first/', finished_experiment)
add_finished_experiment('/media/six_T_disk/bobzhou/amd_desktop_measurement/second/', finished_experiment)
add_finished_experiment('/media/six_T_disk/bobzhou/amd_desktop_measurement/third/', finished_experiment)
add_finished_experiment('/media/storage/', finished_experiment)
print "Finished experiment check completed!"

connection = pika.BlockingConnection(pika.ConnectionParameters(
        host='192.168.1.2', port=5672, heartbeat_interval=0))
channel = connection.channel()
channel.queue_declare(queue='intel_queue', durable=True)

def single_submission():
    message = "python Y:\\intel_measurements\\amd_benign_scripts\\monkey.py \"Spotify\" 2 " 

    channel.basic_publish(exchange='',
                          routing_key='intel_queue',
                          body=message,
                          properties=pika.BasicProperties(
                             delivery_mode = 2, # make message persistent
                          ))
    print(" [x] Sent %r" % message)

def group_submission():
    for times in np.arange(0, times_to_measure):
        for benchmarks in window_info:
            # if the benchmark has been run, forget about it
            # if the benchmark has been tested and can be run
            if (str(times) not in finished_experiment or \
                benchmarks not in finished_experiment[str(times)]) \
                and 'process_name_list' in window_info[benchmarks] \
                and 'window_name' in window_info[benchmarks] \
                and window_info[benchmarks]['process_name_list'] != []\
                and window_info[benchmarks]['window_name'] != "":
                message = "python Y:\\intel_measurements\\amd_benign_scripts\\monkey.py " \
                              + " \"" + benchmarks + "\" " + str(times) 
                print(" [x] Sent %r" % message)

                channel.basic_publish(exchange='',
                                      routing_key='intel_queue',
                                      body=message,
                                      properties=pika.BasicProperties(
                                         delivery_mode = 2, # make message persistent
                                      ))
#single_submission()
group_submission()
connection.close()
