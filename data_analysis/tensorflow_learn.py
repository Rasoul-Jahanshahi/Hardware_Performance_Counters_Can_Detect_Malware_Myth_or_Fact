import logging, json
import tensorflow as tf
import numpy as np
from learn_all_boyou import boyou_learn
from sklearn.metrics import precision_recall_fscore_support
from sklearn.metrics import classification_report
from sklearn.metrics import roc_curve, auc

class tensorflow_learn(boyou_learn):
	def setup_classifiers(self):
		feature_columns = [tf.contrib.layers.real_valued_column("x", dimension=12)]
		self.names	  = ['Linear Regressor', 'svm', 'dnn']
		self.estimators = [ \
							tf.contrib.learn.LinearClassifier(feature_columns=feature_columns),\
							tf.contrib.learn.SVM(feature_columns=feature_columns,\
							 example_id_column="example_id",\
							 l2_regularization=1,\
							 ),\
							tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,\
														  hidden_units=[144, 144, 144, 144, 144, 144],\
														  n_classes=2,\
														  optimizer=tf.train.ProximalAdagradOptimizer(\
														  learning_rate=0.1,\
														  l2_regularization_strength=0.1)
														)]
		
		self.logger.info("initialization complete") 

		# reformat data forms
		self.input_fn = tf.estimator.inputs.numpy_input_fn(\
			{"x": self.X_train, "example_id": np.arange(len(self.X_train)).astype('str')},\
					self.y_train, num_epochs=None, shuffle=True)
		self.train_input_fn = tf.estimator.inputs.numpy_input_fn(\
			{"x": self.X_train, "example_id": np.arange(len(self.X_train)).astype('str')},\
					self.y_train, num_epochs=100, shuffle=False)
		self.eval_input_fn = tf.estimator.inputs.numpy_input_fn(\
			{"x": self.X_test, "example_id": np.arange(len(self.X_test)).astype('str')},\
					self.y_test, num_epochs=100, shuffle=False)
		self.predict_input_fn = tf.estimator.inputs.numpy_input_fn(\
			{"x": self.X_test, "example_id": np.arange(len(self.X_test)).astype('str')},\
					num_epochs=1, shuffle=False)
		self.report						 = {}

	def text_class_report(self, clf, name):
		self.logger.info("*"*10 + "text report" + "*"*10)
		test_predict = clf.predict(input_fn=self.predict_input_fn)
		# linear regression
		if name == 'svm':
			self.test_predict = [elem['classes'] for elem in list(test_predict)]
		else:
			self.test_predict = list(test_predict)
		self.logger.info(self.test_predict)
		precision, recall, f1_score, support = precision_recall_fscore_support(self.y_test, self.test_predict, beta=2.0, pos_label=0)
		self.report[name]				  = {}
		self.report[name]['precision']	  = list(precision)
		self.report[name]['recall']		  = list(recall)
		self.report[name]['f1_score']	  = list(f1_score)
		self.report[name]['support']	  = list(support)

		with open('classification_report_tensorflow.txt', 'w') as outfile:
			json.dump(self.report, outfile, indent=2)
		outfile.close()

		self.logger.info("\n" + classification_report(self.y_test, self.test_predict, digits = 2, target_names=name))


	def roc_curve_report(self, clf, name):
		self.logger.info("*"*10 + "roc report" + "*"*10)
		predict_proba						= clf.predict_proba(input_fn=self.predict_input_fn)
		self.predict_proba					= list(predict_proba)
		self.predict_proba					= [elem[0] for elem in self.predict_proba]

		fpr, tpr, _			= roc_curve(self.y_test, self.predict_proba, pos_label=0)
		roc_auc				= auc(fpr, tpr)
		self.report[name]['fpr']			= list(fpr)
		self.report[name]['tpr']			= list(tpr)
		self.report[name]['roc_auc']		= roc_auc
		self.logger.info("*"*10  + str(roc_auc) + "*"*10)

		with open('classification_report_tensorflow.txt', 'w') as outfile:
			json.dump(self.report, outfile, indent=2)
		outfile.close()

	def run(self):
		config = tf.ConfigProto(intra_op_parallelism_threads=2, \
                    inter_op_parallelism_threads=2,\
                    log_device_placement=True)
        # config.gpu_options.allow_growth = False
        #             session = tf.Session(config=config) 
		self.logger.info('Start to run ...')
		self.setup_train_test_split()
		self.setup_classifiers()
		for name, estimator in zip(self.names, self.estimators): 
			estimator.fit(input_fn=self.input_fn, steps=10000)
			self.logger.info(name + " traning complete!")
			self.text_class_report(estimator, name)
			if name != 'svm':
				self.roc_curve_report(estimator, name)
			

if __name__ == "__main__":
	global logger	
	logger  = logging.getLogger()
	logger.setLevel(logging.DEBUG)

	logger_handler = logging.StreamHandler()
	logger_handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(filename)s [%(lineno)d]: %(funcName)s(): %(message)s'))
	logger.addHandler(logger_handler)

	learn1 = tensorflow_learn(logger, data_path_prefix='/home/bobzhou/2017_summer/data_analysis/amd_data_analysis/')
	learn1.run()
