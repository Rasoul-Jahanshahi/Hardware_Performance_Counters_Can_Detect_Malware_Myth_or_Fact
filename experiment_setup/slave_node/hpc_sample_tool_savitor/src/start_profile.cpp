#include "../include/stdafx.h"

// The number of applicaiton to profile will always be 1 
const unsigned int applicaiton_count = 1;

void profile::start_profile(unsigned int *pProcessIds)
{

	// Fixing the profiler to the applicaiton under consideration
	error_log = fnSetFilterProcesses(pProcessIds, applicaiton_count);
	if (error_log == S_OK)
		std::cout << "Successfully set the profiler to monitor the applicaiton with processID: " << *pProcessIds <<std::endl;
	else
	{
		std::cout << "Could not set the profiler to monitor only the applicaiton with possible error: " << error_decode(error_log) << std::endl;
		while (1);
		exit(EXIT_FAILURE);
	}


	// Start Profiling 
	error_log = fnStartProfiling(startPaused, &CODEANALYST_PAUSE_KEY[0], pProfileState);
	if (error_log == S_OK)
	{
		std::cout << "Successfully started profiling " << error_decode(error_log) << std::endl;
		std::cout << "Porfiler state: " << get_profiler_state() << std::endl;
		
	}
	else
	{
		std::cout << "Could not start profile with possible error : " << error_decode(error_log) << std::endl;
		kill_profile();
	}
	
	// Get the key for pausing/resuming the current profiler
	pause_resume_key = fnGetProfileControlKey(&CODEANALYST_PAUSE_KEY[0]);
	if (pause_resume_key == NULL)
		std::cout << "There was no active profile with the pause key" << std::endl;

	return;

}