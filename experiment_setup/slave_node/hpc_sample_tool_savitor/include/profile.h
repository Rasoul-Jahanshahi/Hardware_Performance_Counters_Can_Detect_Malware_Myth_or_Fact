#pragma once
#include "../include/stdafx.h"

#ifndef setup_hpc
#define setup_hpc

#define START_COUNT 0

// Variables to determine counting of events on the Hardware Performance Counters
const bool			edgeDetect = false;
const bool			usrEvents = true;
const bool			osEvents = true;
const bool			guestOnlyEvents = false;
const bool			hostOnlyEvents = false;
const bool			countingEvent = true;
const bool			startPaused = false;

//strcut to pass the arguments to the threads that sample the HPCs
typedef struct event_count
{
	event_count()
	{
		CpuCore = 0;
		counter_index = 0;
		pStoreEventCount = NULL;
	}

	unsigned int CpuCore;
	unsigned int counter_index;
	unsigned __int64 *pStoreEventCount;

}read_count;


class profile
{
public:

	// Declarations to setup the profilers 
	unsigned int		*pEventCounterCount;				// Pointer to the number of counters on the architecture
	unsigned __int64	*pPerformanceEvent;					// Pointer to the return value for Make event funtion
	unsigned int		*pAvailabilityMask;					// Pointer to the mask of the events
	wchar_t				*pErrorMsg;							// Pointer to the error message
	unsigned int		*pMajor;							// Pointer to the major number
	unsigned int		*pMinor;							// Pointer to the minor number
	unsigned int		*pBuild;							// Pointer to the build version number
	unsigned __int64	*pAllEventCount;					// Array to store the events sampled
	unsigned int		ErrorMsgSize;						// Will store the error that occurs while profiling
	unsigned int		Core;								// The core to monitor on
	unsigned __int64	CpuCoreMask;						// Core Mask
	
	
	// Declarations for using the variables in the AMD Code Analyst API
	CaProfileCtrlKey	pause_resume_key;						// Stores the key to pause the profiler
	ProfileState		*pProfileState;						// Pointer to the current profiling state of the profiler
	EventConfiguration  *pEventConfig;						// Will store the configurations for each event
	HRESULT				error_log;							// Stores the error_log for each variable


	// Variables for spawning threads that reads the counters
	// Thread Properties
	void *security;
	unsigned stack_size;
	unsigned initflag;
	unsigned *thrdaddr;

	// Thread affinity
	DWORD_PTR dwThreadAffinityMask;
	DWORD_PTR thread_affinity;

	//Thread Running state handler
	DWORD thread_resume_log;

	// Mutex Properties
	LPSECURITY_ATTRIBUTES lpMutexAttributes;
	BOOL bInitialOwner;
	LPCTSTR lpName;
	void *arglist;

	// Required to Terminate the Thread
	DWORD  dwExitCode;
	LPDWORD pDwExitCode = &dwExitCode;

	// Handle that stores the thread properties that reads the counter
	HANDLE *threads_for_reading_counter;
	
	// Struct object
	read_count *get_counter;

	// Member Functions
	profile(unsigned int);
	void init_profile(void);
	void make_event(unsigned int, unsigned int, unsigned int);
	void config_events(unsigned int);
	void start_profile(unsigned int *);
	void kill_profile(void);
	void end_profile(void);
	unsigned __int64 * sample_profile(unsigned int);
	std::string get_profiler_state(void);
	std::string error_decode(HRESULT);
	
};

#endif
