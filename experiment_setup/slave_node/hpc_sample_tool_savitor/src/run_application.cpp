#include "../include/stdafx.h"

RunApp::RunApp()
{
	lpApplicationName = (LPCSTR)"C:\\Windows\\System32\\cmd.exe";
	lpCommandLine = NULL;
	lpProcessAttributes = NULL;
	lpThreadAttributes = NULL;
	bInheritHandles = false;
	dwCreationFlags = CREATE_SUSPENDED;
	lpEnvironment = NULL;
	lpCurrentDirectory = NULL;
	startupInfo;
	processInformation;
	lpStartupInfo = &startupInfo;
	lpProcessInformation = &processInformation;
	lpExitCode = (LPDWORD)&uExitCode;
	
	ZeroMemory(&startupInfo, sizeof(startupInfo));
	startupInfo.cb = sizeof(startupInfo);
	ZeroMemory(&processInformation, sizeof(processInformation));
}

bool RunApp::setup_RunApp(char* exepath, unsigned __int64 cpuCoreaffinityMask)
{
	
	//Change the format of the command line arguments to suit the CreateProcessA()
	lpCommandLine = (LPSTR)exepath;

	// Set the application to run and the affinity as demanded by the user
	dwProcessAffinityMask = (DWORD_PTR)cpuCoreaffinityMask;

	std::cout << lpApplicationName << std::endl;
	std::cout << lpCommandLine << std::endl;
	// Create the process
	if (CreateProcessA(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes,
		bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation))
	{
		// If the process runs successfullly then set the affinity to a fixed core.
		if (SetProcessAffinityMask(lpProcessInformation->hProcess, dwProcessAffinityMask))
			std::cout << "Affinity of the process successfully set " << std::endl;
		else
			std::cout << "Could not set the affinity of the applicaiton with error code : " << GetLastError() << std::endl;

		std::cout << "Process Running Successfully. \nProcess ID: " << lpProcessInformation->dwProcessId
			<< " and Thread ID: " << lpProcessInformation->dwThreadId << std::endl;

		return true;
	}

	else
	{
		std::cout << "Test Process Failed with " << GetLastError() << std::endl;
		return false;
	}
}


bool RunApp::exit_RunApp()
{
	// Get the exit code of the process
	GetExitCodeProcess(lpProcessInformation->hProcess, lpExitCode);
	
	// Terminate the process
	if (TerminateProcess(lpProcessInformation->hProcess, uExitCode))
	{
		std::cout << "The process terminated successfully" << std::endl;
		// Close process and thread handles. 
		CloseHandle(lpProcessInformation->hProcess);
		CloseHandle(lpProcessInformation->hThread);
		return true;
	}
	else
	{
		std::cout << "Could not kill the process with error code: " << GetLastError() << std::endl;
		return false;
	}

	
}