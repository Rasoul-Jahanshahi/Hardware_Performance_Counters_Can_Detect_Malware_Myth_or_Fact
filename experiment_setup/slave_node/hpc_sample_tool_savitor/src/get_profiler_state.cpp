#include "../include/stdafx.h"


std::string profile::get_profiler_state()
{
	error_log = fnGetProfilerState(pProfileState);
	if (error_log == S_OK)
	{
		switch (*pProfileState)
		{
			case ProfilingUnavailable: 	return "The profiler is not available"; break;
			case ProfilingStopped:  	return "The profiler is currently not profiling"; break;
			case Profiling: 			return "The profiler is currently profiling"; break;
			case ProfilingPaused: 		return "The profiler is currently paused"; break;
			case ProfilingAborted: 		return "The profiler encountered an error and aborted the"; break;
			default: 					return "Unexpected profile state";
		}
	}
	else
		return "Could not get the current profiler state with possible error " + error_decode(error_log);

}